project.ext.getDeploymentVersion = {
    if(VCS_TAG == null) {
        throw new RuntimeException("VCS_TAG is not set. Cannot detect deployment version")
    }
    String tmpDeploymentVersion = VCS_TAG.replaceFirst("v", "");
    if (!tmpDeploymentVersion.matches("\\d+\\.\\d+\\.\\d+")) {
        throw new RuntimeException("Version is not valid. Correct format is like 1.0.2 but was " + tmpDeploymentVersion)
    }
    return tmpDeploymentVersion;
}

bintrayUpload.doFirst {
    println "Deploying version ${getDeploymentVersion()} from vscTag ${VCS_TAG}"
}

bintray {
    user = "${BINTRAY.userName}"
    key = "${BINTRAY.apiToken}"

    publications = ['CustomMavenPublication']
    // When uploading Maven-based publication files. Nebula is because we're using the netflix plugins and they use nebula as default name for a publication
    dryRun = !DEPLOYMENT // Whether to run this as dry-run, without deploying
    publish = DEPLOYMENT // Whether version should be auto published after an upload
    override = false // Whether to override version artifacts already published

    pkg {
        repo = "${BINTRAY.repo}"
        name = "${BINTRAY.name}"
        userOrg = "${BINTRAY.organization}"
        websiteUrl = "${INFO.github}"
        issueTrackerUrl = "${INFO.githubIssues}"
        vcsUrl = "${INFO.repo}"
        licenses = [INFO.licenseNameShort]

        version {
            name = getDeploymentVersion()
            released = new Date()
            vcsTag = VCS_TAG
            gpg { sign = true }
            mavenCentralSync {
                //sync = true 
                //user = 'userToken' //OSS user token: mandatory
                //password = 'paasword' //OSS user password: mandatory
                //close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

def pomExtraInfo = {
    url INFO.url
    scm {
        connection "scm:git:${INFO.repo}"
        developerConnection "scm:git:${INFO.repo}"
        url INFO.repo
    }
    licenses {
        license {
            name INFO.licenseName
            url INFO.licenseUrl
        }
    }
}

publishing {
    publications {
        CustomMavenPublication(MavenPublication) {
            groupId POM.groupId
            artifactId POM.artifactId
            version getDeploymentVersion()

            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                asNode().appendNode('description', POM.description)
                asNode().children().last() + pomExtraInfo
            }

            from components.java
        }
    }
}
